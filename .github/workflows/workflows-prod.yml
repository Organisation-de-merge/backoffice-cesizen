name: "Construction du workflow de production"
run-name: ${{ github.actor }} a lancé le workflow de production

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps: 
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Installation des dépendances
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Compilation du projet
        run: npm run build

      - name: Enregistrement du cache (node_modules)
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}

  push-build-to-docker:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Connexion à GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}  

      - name: Build & Push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ghcr.io/organisation-de-merge/backend-cesizen:latest

  deploy-docker-prod:
    runs-on: ubuntu-latest
    if: github.ref_name == 'main'
    needs: push-build-to-docker
    environment: 
      name: prod
      url: http://ec2-54-225-54-84.compute-1.amazonaws.com/
    steps: 
      - name: Déploiement sur EC2
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd cesizen-prod/backoffice-prod
            sudo docker compose -f docker-compose.prod.yml pull
            sudo docker compose -f docker-compose.prod.yml up -d
